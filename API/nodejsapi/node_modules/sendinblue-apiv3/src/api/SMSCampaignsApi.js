/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateModel', 'model/CreateSmsCampaign', 'model/CreatedProcessId', 'model/ErrorModel', 'model/GetSmsCampaign', 'model/GetSmsCampaigns', 'model/PostSendSmsTestFailed', 'model/RequestSMSRecipientExport', 'model/SendReport', 'model/SendTestSms', 'model/UpdateCampaignStatus', 'model/UpdateSmsCampaign'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateModel'), require('../model/CreateSmsCampaign'), require('../model/CreatedProcessId'), require('../model/ErrorModel'), require('../model/GetSmsCampaign'), require('../model/GetSmsCampaigns'), require('../model/PostSendSmsTestFailed'), require('../model/RequestSMSRecipientExport'), require('../model/SendReport'), require('../model/SendTestSms'), require('../model/UpdateCampaignStatus'), require('../model/UpdateSmsCampaign'));
  } else {
    // Browser globals (root is window)
    if (!root.SendinBlueApi) {
      root.SendinBlueApi = {};
    }
    root.SendinBlueApi.SMSCampaignsApi = factory(root.SendinBlueApi.ApiClient, root.SendinBlueApi.CreateModel, root.SendinBlueApi.CreateSmsCampaign, root.SendinBlueApi.CreatedProcessId, root.SendinBlueApi.ErrorModel, root.SendinBlueApi.GetSmsCampaign, root.SendinBlueApi.GetSmsCampaigns, root.SendinBlueApi.PostSendSmsTestFailed, root.SendinBlueApi.RequestSMSRecipientExport, root.SendinBlueApi.SendReport, root.SendinBlueApi.SendTestSms, root.SendinBlueApi.UpdateCampaignStatus, root.SendinBlueApi.UpdateSmsCampaign);
  }
}(this, function(ApiClient, CreateModel, CreateSmsCampaign, CreatedProcessId, ErrorModel, GetSmsCampaign, GetSmsCampaigns, PostSendSmsTestFailed, RequestSMSRecipientExport, SendReport, SendTestSms, UpdateCampaignStatus, UpdateSmsCampaign) {
  'use strict';

  /**
   * SMSCampaigns service.
   * @module api/SMSCampaignsApi
   * @version 3.0.0
   */

  /**
   * Constructs a new SMSCampaignsApi. 
   * @alias module:api/SMSCampaignsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creates a SMS campaign
     * @param {module:model/CreateSmsCampaign} createSmsCampaign Values to create an SMS Campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateModel} and HTTP response
     */
    this.createSMSCampaignWithHttpInfo = function(createSmsCampaign) {
      var postBody = createSmsCampaign;

      // verify the required parameter 'createSmsCampaign' is set
      if (createSmsCampaign === undefined || createSmsCampaign === null) {
        throw new Error("Missing the required parameter 'createSmsCampaign' when calling createSMSCampaign");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModel;

      return this.apiClient.callApi(
        '/smsCampaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a SMS campaign
     * @param {module:model/CreateSmsCampaign} createSmsCampaign Values to create an SMS Campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateModel}
     */
    this.createSMSCampaign = function(createSmsCampaign) {
      return this.createSMSCampaignWithHttpInfo(createSmsCampaign)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the SMS campaign
     * @param {String} campaignId id of the SMS campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSMSCampaignsWithHttpInfo = function(campaignId) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteSMSCampaigns");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete the SMS campaign
     * @param {String} campaignId id of the SMS campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSMSCampaigns = function(campaignId) {
      return this.deleteSMSCampaignsWithHttpInfo(campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the informations for all your created SMS campaigns
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status Status of campaign.
     * @param {Number} opts.limit Number limitation for the result returned (default to 500)
     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmsCampaigns} and HTTP response
     */
    this.getSMSCampaignsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'status': opts['status'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSmsCampaigns;

      return this.apiClient.callApi(
        '/smsCampaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the informations for all your created SMS campaigns
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status Status of campaign.
     * @param {Number} opts.limit Number limitation for the result returned (default to 500)
     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmsCampaigns}
     */
    this.getSMSCampaigns = function(opts) {
      return this.getSMSCampaignsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a SMS campaign
     * @param {String} campaignId id of the SMS campaign
     * @param {module:model/GetSmsCampaign} getSmsCampaign Values to update an SMS Campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSmsCampaign} and HTTP response
     */
    this.getSmsCampaignWithHttpInfo = function(campaignId, getSmsCampaign) {
      var postBody = getSmsCampaign;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getSmsCampaign");
      }

      // verify the required parameter 'getSmsCampaign' is set
      if (getSmsCampaign === undefined || getSmsCampaign === null) {
        throw new Error("Missing the required parameter 'getSmsCampaign' when calling getSmsCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSmsCampaign;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a SMS campaign
     * @param {String} campaignId id of the SMS campaign
     * @param {module:model/GetSmsCampaign} getSmsCampaign Values to update an SMS Campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSmsCampaign}
     */
    this.getSmsCampaign = function(campaignId, getSmsCampaign) {
      return this.getSmsCampaignWithHttpInfo(campaignId, getSmsCampaign)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Exports the recipients of the specified campaign.
     * It returns the background process ID which on completion calls the notify URL that you have set in the input.
     * @param {String} campaignId id of the campaign
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestSMSRecipientExport} opts.recipientExport Values to send for a recipient export request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedProcessId} and HTTP response
     */
    this.requestSMSRecipientExportWithHttpInfo = function(campaignId, opts) {
      opts = opts || {};
      var postBody = opts['recipientExport'];

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling requestSMSRecipientExport");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreatedProcessId;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/exportRecipients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Exports the recipients of the specified campaign.
     * It returns the background process ID which on completion calls the notify URL that you have set in the input.
     * @param {String} campaignId id of the campaign
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestSMSRecipientExport} opts.recipientExport Values to send for a recipient export request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedProcessId}
     */
    this.requestSMSRecipientExport = function(campaignId, opts) {
      return this.requestSMSRecipientExportWithHttpInfo(campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send your SMS campaign immediately
     * @param {String} campaignId id of the campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sendSMSCampaignNowWithHttpInfo = function(campaignId) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendSMSCampaignNow");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/sendNow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send your SMS campaign immediately
     * @param {String} campaignId id of the campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sendSMSCampaignNow = function(campaignId) {
      return this.sendSMSCampaignNowWithHttpInfo(campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send report of SMS campaigns
     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.
     * @param {String} campaignId id of the campaign
     * @param {module:model/SendReport} sendReport Values for send a report
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sendSMSReportWithHttpInfo = function(campaignId, sendReport) {
      var postBody = sendReport;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendSMSReport");
      }

      // verify the required parameter 'sendReport' is set
      if (sendReport === undefined || sendReport === null) {
        throw new Error("Missing the required parameter 'sendReport' when calling sendSMSReport");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/sendReport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send report of SMS campaigns
     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.
     * @param {String} campaignId id of the campaign
     * @param {module:model/SendReport} sendReport Values for send a report
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sendSMSReport = function(campaignId, sendReport) {
      return this.sendSMSReportWithHttpInfo(campaignId, sendReport)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send an SMS
     * @param {String} campaignId Id of the SMS campaign
     * @param {module:model/SendTestSms} sendTestSms Mobile number to which send the test
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sendTestSmsWithHttpInfo = function(campaignId, sendTestSms) {
      var postBody = sendTestSms;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendTestSms");
      }

      // verify the required parameter 'sendTestSms' is set
      if (sendTestSms === undefined || sendTestSms === null) {
        throw new Error("Missing the required parameter 'sendTestSms' when calling sendTestSms");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/sendTest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send an SMS
     * @param {String} campaignId Id of the SMS campaign
     * @param {module:model/SendTestSms} sendTestSms Mobile number to which send the test
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sendTestSms = function(campaignId, sendTestSms) {
      return this.sendTestSmsWithHttpInfo(campaignId, sendTestSms)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the campaign status
     * @param {String} campaignId id of the campaign
     * @param {module:model/UpdateCampaignStatus} status Status of the campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSMSCampaignStatusWithHttpInfo = function(campaignId, status) {
      var postBody = status;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateSMSCampaignStatus");
      }

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateSMSCampaignStatus");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update the campaign status
     * @param {String} campaignId id of the campaign
     * @param {module:model/UpdateCampaignStatus} status Status of the campaign.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSMSCampaignStatus = function(campaignId, status) {
      return this.updateSMSCampaignStatusWithHttpInfo(campaignId, status)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a SMS campaign
     * @param {String} campaignId id of the SMS campaign
     * @param {module:model/UpdateSmsCampaign} updateSmsCampaign Values to update an SMS Campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateSmsCampaignWithHttpInfo = function(campaignId, updateSmsCampaign) {
      var postBody = updateSmsCampaign;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateSmsCampaign");
      }

      // verify the required parameter 'updateSmsCampaign' is set
      if (updateSmsCampaign === undefined || updateSmsCampaign === null) {
        throw new Error("Missing the required parameter 'updateSmsCampaign' when calling updateSmsCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates a SMS campaign
     * @param {String} campaignId id of the SMS campaign
     * @param {module:model/UpdateSmsCampaign} updateSmsCampaign Values to update an SMS Campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateSmsCampaign = function(campaignId, updateSmsCampaign) {
      return this.updateSmsCampaignWithHttpInfo(campaignId, updateSmsCampaign)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
